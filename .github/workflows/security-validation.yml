name: Security Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 1 * * 1'  # Weekly scan on Mondays at 1:30 AM UTC

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-extended,security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install UV
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Install Dependencies
      run: |
        uv venv
        uv pip install -e .

    - name: Run pip-audit
      run: |
        uv pip install pip-audit
        uv run pip-audit

    - name: Check with Safety
      run: |
        uv pip install safety
        uv run safety check --json || true  # Continue even if vulnerabilities found

    - name: Upload dependency check results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-results
        path: |
          *.json
          *.txt

  bandit-security-scan:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Bandit
      run: pip install bandit[toml]

    - name: Run Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
        cat bandit-report.txt

    - name: Upload Bandit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-results
        path: |
          bandit-report.json
          bandit-report.txt

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/python

  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better secret detection

    - name: TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        extra_args: --debug --only-verified

    - name: Gitleaks Secret Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner for Dockerfile
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-dockerfile.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-dockerfile.sarif'

    - name: Build Docker image for scanning
      run: docker build -t farcaster-mcp:scan .

    - name: Run Trivy on built image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'farcaster-mcp:scan'
        format: 'sarif'
        output: 'trivy-image.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image.sarif'

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install UV
      uses: astral-sh/setup-uv@v5

    - name: Check licenses
      run: |
        uv pip install pip-licenses
        uv run pip-licenses --format=csv --output-file=licenses.csv
        uv run pip-licenses --fail-on="GPL;LGPL;AGPL;MPL" || echo "::warning::Found copyleft licenses"
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.csv

  code-quality:
    name: Code Quality & Best Practices
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install analysis tools
      run: |
        pip install pylint flake8 mypy black isort

    - name: Run Pylint
      run: |
        pylint farcaster_mcp.py --exit-zero --output-format=json > pylint-report.json || true
        pylint farcaster_mcp.py --exit-zero || true

    - name: Run Flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with Black
      run: |
        black --check . || echo "::warning::Code formatting issues found"

    - name: Check import sorting
      run: |
        isort --check-only . || echo "::warning::Import sorting issues found"

    - name: Upload code quality results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-results
        path: |
          pylint-report.json

  api-security-check:
    name: API Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for hardcoded API endpoints
      run: |
        echo "Checking for hardcoded API endpoints and potential security issues..."
        grep -n "api.warpcast.com" farcaster_mcp.py || true
        grep -n "127.0.0.1" farcaster_mcp.py || true
        grep -n "MNEMONIC" farcaster_mcp.py || true
        
        echo "::warning::Found hardcoded API endpoints and sensitive configuration. Ensure these are properly secured in production."

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-check, bandit-security-scan, semgrep-scan, secret-scanning, docker-security, license-check, code-quality, api-security-check]
    if: always()
    
    steps:
    - name: Generate Security Report Summary
      run: |
        echo "# Security Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Bandit Security | ${{ needs.bandit-security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep Scan | ${{ needs.semgrep-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Security | ${{ needs.docker-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| API Security | ${{ needs.api-security-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- Review all security findings before deployment" >> $GITHUB_STEP_SUMMARY
        echo "- Ensure MNEMONIC environment variable is properly secured" >> $GITHUB_STEP_SUMMARY
        echo "- Consider implementing rate limiting for API calls" >> $GITHUB_STEP_SUMMARY
        echo "- Validate all user inputs before processing" >> $GITHUB_STEP_SUMMARY